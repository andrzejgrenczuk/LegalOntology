package pl.grenczuk.metaonto;

import pl.grenczuk.metaonto.impl.*;


import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: MyFactory<br>
 * @version generated on Sat May 07 16:00:15 CEST 2022 by andrz
 */
public class MyFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public MyFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public MyFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://www.semanticweb.org/andrz/ontologies/2021/9/PostepowanieCywilne#Apelacyjny
     */

    {
        javaMapping.add("http://www.semanticweb.org/andrz/ontologies/2021/9/PostepowanieCywilne#Apelacyjny", Apelacyjny.class, DefaultApelacyjny.class);
    }

    /**
     * Creates an instance of type Apelacyjny.  Modifies the underlying ontology.
     */
    public Apelacyjny createApelacyjny(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_APELACYJNY, DefaultApelacyjny.class);
    }

    /**
     * Gets an instance of type Apelacyjny with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Apelacyjny getApelacyjny(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_APELACYJNY, DefaultApelacyjny.class);
    }

    /**
     * Gets all instances of Apelacyjny from the ontology.
     */
    public Collection<? extends Apelacyjny> getAllApelacyjnyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_APELACYJNY, DefaultApelacyjny.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/andrz/ontologies/2021/9/PostepowanieCywilne#Okręgowy
     */

    {
        javaMapping.add("http://www.semanticweb.org/andrz/ontologies/2021/9/PostepowanieCywilne#Okręgowy", Okręgowy.class, DefaultOkręgowy.class);
    }

    /**
     * Creates an instance of type Okręgowy.  Modifies the underlying ontology.
     */
    public Okręgowy createOkręgowy(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OKRĘGOWY, DefaultOkręgowy.class);
    }

    /**
     * Gets an instance of type Okręgowy with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Okręgowy getOkręgowy(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OKRĘGOWY, DefaultOkręgowy.class);
    }

    /**
     * Gets all instances of Okręgowy from the ontology.
     */
    public Collection<? extends Okręgowy> getAllOkręgowyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OKRĘGOWY, DefaultOkręgowy.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/andrz/ontologies/2021/9/PostepowanieCywilne#Rejonowy
     */

    {
        javaMapping.add("http://www.semanticweb.org/andrz/ontologies/2021/9/PostepowanieCywilne#Rejonowy", Rejonowy.class, DefaultRejonowy.class);
    }

    /**
     * Creates an instance of type Rejonowy.  Modifies the underlying ontology.
     */
    public Rejonowy createRejonowy(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_REJONOWY, DefaultRejonowy.class);
    }

    /**
     * Gets an instance of type Rejonowy with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Rejonowy getRejonowy(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_REJONOWY, DefaultRejonowy.class);
    }

    /**
     * Gets all instances of Rejonowy from the ontology.
     */
    public Collection<? extends Rejonowy> getAllRejonowyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_REJONOWY, DefaultRejonowy.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/andrz/ontologies/2021/9/PostepowanieCywilne#Rodzaje_sądów
     */

    {
        javaMapping.add("http://www.semanticweb.org/andrz/ontologies/2021/9/PostepowanieCywilne#Rodzaje_sądów", Rodzaje_sądów.class, DefaultRodzaje_sądów.class);
    }

    /**
     * Creates an instance of type Rodzaje_sądów.  Modifies the underlying ontology.
     */
    public Rodzaje_sądów createRodzaje_sądów(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RODZAJE_SĄDÓW, DefaultRodzaje_sądów.class);
    }

    /**
     * Gets an instance of type Rodzaje_sądów with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Rodzaje_sądów getRodzaje_sądów(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RODZAJE_SĄDÓW, DefaultRodzaje_sądów.class);
    }

    /**
     * Gets all instances of Rodzaje_sądów from the ontology.
     */
    public Collection<? extends Rodzaje_sądów> getAllRodzaje_sądówInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RODZAJE_SĄDÓW, DefaultRodzaje_sądów.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/andrz/ontologies/2021/9/PostepowanieCywilne#Sąd_Najwyższy
     */

    {
        javaMapping.add("http://www.semanticweb.org/andrz/ontologies/2021/9/PostepowanieCywilne#Sąd_Najwyższy", Sąd_Najwyższy.class, DefaultSąd_Najwyższy.class);
    }

    /**
     * Creates an instance of type Sąd_Najwyższy.  Modifies the underlying ontology.
     */
    public Sąd_Najwyższy createSąd_Najwyższy(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SĄD_NAJWYŻSZY, DefaultSąd_Najwyższy.class);
    }

    /**
     * Gets an instance of type Sąd_Najwyższy with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Sąd_Najwyższy getSąd_Najwyższy(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SĄD_NAJWYŻSZY, DefaultSąd_Najwyższy.class);
    }

    /**
     * Gets all instances of Sąd_Najwyższy from the ontology.
     */
    public Collection<? extends Sąd_Najwyższy> getAllSąd_NajwyższyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SĄD_NAJWYŻSZY, DefaultSąd_Najwyższy.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/andrz/ontologies/2021/9/PostepowanieCywilne#Zakres_działalności_sądu
     */

    {
        javaMapping.add("http://www.semanticweb.org/andrz/ontologies/2021/9/PostepowanieCywilne#Zakres_działalności_sądu", Zakres_działalności_sądu.class, DefaultZakres_działalności_sądu.class);
    }

    /**
     * Creates an instance of type Zakres_działalności_sądu.  Modifies the underlying ontology.
     */
    public Zakres_działalności_sądu createZakres_działalności_sądu(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ZAKRES_DZIAŁALNOŚCI_SĄDU, DefaultZakres_działalności_sądu.class);
    }

    /**
     * Gets an instance of type Zakres_działalności_sądu with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Zakres_działalności_sądu getZakres_działalności_sądu(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ZAKRES_DZIAŁALNOŚCI_SĄDU, DefaultZakres_działalności_sądu.class);
    }

    /**
     * Gets all instances of Zakres_działalności_sądu from the ontology.
     */
    public Collection<? extends Zakres_działalności_sądu> getAllZakres_działalności_sąduInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ZAKRES_DZIAŁALNOŚCI_SĄDU, DefaultZakres_działalności_sądu.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/andrz/ontologies/2021/9/PostepowanieCywilne#Zakres_podmiotowy
     */

    {
        javaMapping.add("http://www.semanticweb.org/andrz/ontologies/2021/9/PostepowanieCywilne#Zakres_podmiotowy", Zakres_podmiotowy.class, DefaultZakres_podmiotowy.class);
    }

    /**
     * Creates an instance of type Zakres_podmiotowy.  Modifies the underlying ontology.
     */
    public Zakres_podmiotowy createZakres_podmiotowy(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ZAKRES_PODMIOTOWY, DefaultZakres_podmiotowy.class);
    }

    /**
     * Gets an instance of type Zakres_podmiotowy with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Zakres_podmiotowy getZakres_podmiotowy(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ZAKRES_PODMIOTOWY, DefaultZakres_podmiotowy.class);
    }

    /**
     * Gets all instances of Zakres_podmiotowy from the ontology.
     */
    public Collection<? extends Zakres_podmiotowy> getAllZakres_podmiotowyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ZAKRES_PODMIOTOWY, DefaultZakres_podmiotowy.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/andrz/ontologies/2021/9/PostepowanieCywilne#Zakres_przedmiotowy
     */

    {
        javaMapping.add("http://www.semanticweb.org/andrz/ontologies/2021/9/PostepowanieCywilne#Zakres_przedmiotowy", Zakres_przedmiotowy.class, DefaultZakres_przedmiotowy.class);
    }

    /**
     * Creates an instance of type Zakres_przedmiotowy.  Modifies the underlying ontology.
     */
    public Zakres_przedmiotowy createZakres_przedmiotowy(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ZAKRES_PRZEDMIOTOWY, DefaultZakres_przedmiotowy.class);
    }

    /**
     * Gets an instance of type Zakres_przedmiotowy with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Zakres_przedmiotowy getZakres_przedmiotowy(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ZAKRES_PRZEDMIOTOWY, DefaultZakres_przedmiotowy.class);
    }

    /**
     * Gets all instances of Zakres_przedmiotowy from the ontology.
     */
    public Collection<? extends Zakres_przedmiotowy> getAllZakres_przedmiotowyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ZAKRES_PRZEDMIOTOWY, DefaultZakres_przedmiotowy.class);
    }


}
